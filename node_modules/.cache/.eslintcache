[{"C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\index.js":"1","C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\App.js":"2","C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1647945056037,"results":"4","hashOfConfig":"5"},{"size":13384,"mtime":1647945056036,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1647945056038,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sltkgr",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\index.js",[],[],"C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\App.js",["18","19","20"],[],"import './App.css';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport { Button, Row, Col, Divider, Form, Input, Checkbox, Radio } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\r\nimport _ from 'lodash';\r\n\r\nfunction App(props) {\r\n  const style = { background: '#0092ff', padding: '8px 0', width: '100%' };\r\n  const iconTypes = ['warning', 'error', 'success', 'info', 'question'];\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', padding: 20 }}>\r\n      <p style={{ fontSize: 18, fontWeight: 600 }}>sweetalert2 demo</p>\r\n      <div>\r\n\r\n        <Divider orientation=\"left\">Mixin</Divider>\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertMixin}>Log in</Button>\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\">Inputs</Divider>\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputText}>Text</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputEmail}>Email</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputUrl}>Url</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputPassword}>Password</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputTextArea}>TextArea</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputSelect}>Select</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputRadio}>Radio</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputCheckbox}>Checkbox</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputFile}>File</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputRange}>Range</Button>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showAlertInputMulti}>Multi-input</Button>\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\">Custom</Divider>\r\n        <div style={{ display: 'flex' }}>\r\n          <Form\r\n            name=\"basic\"\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n            initialValues={{ remember: true }}\r\n            // onFinish={onFinish}\r\n            // onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n            style={{ width: '60%' }}\r\n          >\r\n            <Form.Item\r\n              label=\"title\"\r\n              // name=\"title\"\r\n            >\r\n              <Input value={props.title} onChange={(e) => props.onTitleChange(e.target.value)} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"icon\" >\r\n              <Radio.Group value={props.icon} onChange={(e) => props.onIconChange(e.target.value)}>\r\n                {_.map(iconTypes, type => {\r\n                  return(\r\n                    <Radio.Button value={type}>{type}</Radio.Button>\r\n                  )\r\n                })}\r\n              </Radio.Group>\r\n            </Form.Item>\r\n\r\n            {/* <Form.Item label=\"input\">\r\n              <Radio.Group value={props.input} onChange={(e) => props.onInputChange(e.target.value)}>\r\n                <Radio.Button value=\"warning\">warning</Radio.Button>\r\n                <Radio.Button value=\"error\">error</Radio.Button>\r\n                <Radio.Button value=\"success\">success</Radio.Button>\r\n                <Radio.Button value=\"info\">info</Radio.Button>\r\n                <Radio.Button value=\"question\">question</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item> */}\r\n\r\n            {/* <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[{ required: true, message: 'Please input your password!' }]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item> */}\r\n\r\n            {/* <Form.Item name=\"remember\" valuePropName=\"checked\" wrapperCol={{ offset: 8, span: 16 }}>\r\n            <Checkbox>Remember me</Checkbox>\r\n          </Form.Item> */}\r\n\r\n            {/* <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item> */}\r\n          </Form>\r\n        </div>\r\n\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n          <Col className=\"gutter-row\" span={2}>\r\n            <Button onClick={props.showCustomAlert}>Custom alert</Button>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet hoc = WrappedComponent => {\r\n  return class EnhancedComponent extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        title: 'Title',\r\n        icon: 'success',\r\n        input: 'text'\r\n\r\n      }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n    }\r\n\r\n    showAlertMixin = () => {\r\n      const Toast = Swal.mixin({\r\n        toast: true,\r\n        position: 'top-end',\r\n        showConfirmButton: false,\r\n        timer: 3000,\r\n        timerProgressBar: true,\r\n        didOpen: (toast) => {\r\n          toast.addEventListener('mouseenter', Swal.stopTimer)\r\n          toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n        }\r\n      })\r\n\r\n      Toast.fire({\r\n        icon: 'success',\r\n        title: 'Signed in successfully'\r\n      })\r\n    }\r\n\r\n    showAlertInputText = async () => {\r\n      const ipAPI = '//api.ipify.org?format=json'\r\n\r\n      const inputValue = fetch(ipAPI)\r\n        .then(response => response.json())\r\n        .then(data => data.ip)\r\n\r\n      const { value: ipAddress } = await Swal.fire({\r\n        title: 'Enter your IP address',\r\n        input: 'text',\r\n        inputLabel: 'Your IP address',\r\n        inputValue: inputValue,\r\n        showCancelButton: true,\r\n        inputValidator: (value) => {\r\n          if (!value) {\r\n            return 'You need to write something!'\r\n          }\r\n        }\r\n      })\r\n\r\n      if (ipAddress) {\r\n        Swal.fire(`Your IP address is ${ipAddress}`)\r\n      }\r\n    }\r\n\r\n    showAlertInputEmail = async () => {\r\n      const { value: email } = await Swal.fire({\r\n        title: 'Input email address',\r\n        input: 'email',\r\n        inputLabel: 'Your email address',\r\n        inputPlaceholder: 'Enter your email address'\r\n      })\r\n\r\n      if (email) {\r\n        Swal.fire(`Entered email: ${email}`)\r\n      }\r\n    }\r\n\r\n\r\n    showAlertInputUrl = async () => {\r\n      const { value: url } = await Swal.fire({\r\n        input: 'url',\r\n        inputLabel: 'URL address',\r\n        inputPlaceholder: 'Enter the URL'\r\n      })\r\n\r\n      if (url) {\r\n        Swal.fire(`Entered URL: ${url}`)\r\n      }\r\n    }\r\n\r\n    showAlertInputPassword = async () => {\r\n      const { value: password } = await Swal.fire({\r\n        title: 'Enter your password',\r\n        input: 'password',\r\n        inputLabel: 'Password',\r\n        inputPlaceholder: 'Enter your password',\r\n        inputAttributes: {\r\n          maxlength: 10,\r\n          autocapitalize: 'off',\r\n          autocorrect: 'off'\r\n        }\r\n      })\r\n\r\n      if (password) {\r\n        Swal.fire(`Entered password: ${password}`)\r\n      }\r\n    }\r\n\r\n    showAlertInputTextArea = async () => {\r\n      const { value: text } = await Swal.fire({\r\n        input: 'textarea',\r\n        inputLabel: 'Message',\r\n        inputPlaceholder: 'Type your message here...',\r\n        inputAttributes: {\r\n          'aria-label': 'Type your message here'\r\n        },\r\n        showCancelButton: true\r\n      })\r\n\r\n      if (text) {\r\n        Swal.fire(text)\r\n      }\r\n    }\r\n\r\n\r\n    showAlertInputSelect = async () => {\r\n      const { value: fruit } = await Swal.fire({\r\n        title: 'Select field validation',\r\n        input: 'select',\r\n        inputOptions: {\r\n          'Fruits': {\r\n            apples: 'Apples',\r\n            bananas: 'Bananas',\r\n            grapes: 'Grapes',\r\n            oranges: 'Oranges'\r\n          },\r\n          'Vegetables': {\r\n            potato: 'Potato',\r\n            broccoli: 'Broccoli',\r\n            carrot: 'Carrot'\r\n          },\r\n          'icecream': 'Ice cream'\r\n        },\r\n        inputPlaceholder: 'Select a fruit',\r\n        showCancelButton: true,\r\n        inputValidator: (value) => {\r\n          return new Promise((resolve) => {\r\n            if (value === 'oranges') {\r\n              resolve()\r\n            } else {\r\n              resolve('You need to select oranges :)')\r\n            }\r\n          })\r\n        }\r\n      })\r\n\r\n      if (fruit) {\r\n        Swal.fire(`You selected: ${fruit}`)\r\n      }\r\n    }\r\n\r\n\r\n    showAlertInputRadio = async () => {\r\n      /* inputOptions can be an object or Promise */\r\n      const inputOptions = new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            '#ff0000': 'Red',\r\n            '#00ff00': 'Green',\r\n            '#0000ff': 'Blue'\r\n          })\r\n        }, 1000)\r\n      })\r\n\r\n      const { value: color } = await Swal.fire({\r\n        title: 'Select color',\r\n        input: 'radio',\r\n        inputOptions: inputOptions,\r\n        inputValidator: (value) => {\r\n          if (!value) {\r\n            return 'You need to choose something!'\r\n          }\r\n        }\r\n      })\r\n\r\n      if (color) {\r\n        Swal.fire({ html: `You selected: ${color}` })\r\n      }\r\n    }\r\n\r\n    showAlertInputCheckbox = async () => {\r\n      const { value: accept } = await Swal.fire({\r\n        title: 'Terms and conditions',\r\n        input: 'checkbox',\r\n        inputValue: 1,\r\n        inputPlaceholder:\r\n          'I agree with the terms and conditions',\r\n        confirmButtonText:\r\n          'Continue <i class=\"fa fa-arrow-right\"></i>',\r\n        inputValidator: (result) => {\r\n          return !result && 'You need to agree with T&C'\r\n        }\r\n      })\r\n\r\n      if (accept) {\r\n        Swal.fire('You agreed with T&C :)')\r\n      }\r\n    }\r\n\r\n    showAlertInputFile = async () => {\r\n      const { value: file } = await Swal.fire({\r\n        title: 'Select image',\r\n        input: 'file',\r\n        inputAttributes: {\r\n          'accept': 'image/*',\r\n          'aria-label': 'Upload your profile picture'\r\n        }\r\n      })\r\n\r\n      if (file) {\r\n        const reader = new FileReader()\r\n        reader.onload = (e) => {\r\n          Swal.fire({\r\n            title: 'Your uploaded picture',\r\n            imageUrl: e.target.result,\r\n            imageAlt: 'The uploaded picture'\r\n          })\r\n        }\r\n        reader.readAsDataURL(file)\r\n      }\r\n    }\r\n\r\n    showAlertInputRange = async () => {\r\n      Swal.fire({\r\n        title: 'How old are you?',\r\n        icon: 'question',\r\n        input: 'range',\r\n        inputLabel: 'Your age',\r\n        inputAttributes: {\r\n          min: 8,\r\n          max: 120,\r\n          step: 1\r\n        },\r\n        inputValue: 25\r\n      })\r\n    }\r\n\r\n    showAlertInputMulti = async () => {\r\n      const { value: formValues } = await Swal.fire({\r\n        title: 'Multiple inputs',\r\n        html:\r\n          '<input id=\"swal-input1\" class=\"swal2-input\">' +\r\n          '<input id=\"swal-input2\" class=\"swal2-input\">',\r\n        focusConfirm: false,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value,\r\n            document.getElementById('swal-input2').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (formValues) {\r\n        Swal.fire(JSON.stringify(formValues))\r\n      }\r\n    }\r\n\r\n\r\n    onTitleChange = (value) => {\r\n      this.setState({ title: value });\r\n    }\r\n\r\n    onIconChange = (value) => {\r\n      this.setState({ icon: value });\r\n    }\r\n\r\n    onInputChange = (value) => {\r\n      this.setState({ input: value });\r\n    }\r\n\r\n\r\n\r\n    showCustomAlert = () => {\r\n      Swal.fire({\r\n        title: this.state.title,\r\n        icon: this.state.icon,\r\n        // input: this.state.input\r\n      })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n      return <WrappedComponent\r\n        showAlertMixin={this.showAlertMixin}\r\n        showAlertInputText={this.showAlertInputText}\r\n        showAlertInputEmail={this.showAlertInputEmail}\r\n        showAlertInputUrl={this.showAlertInputUrl}\r\n        showAlertInputPassword={this.showAlertInputPassword}\r\n        showAlertInputTextArea={this.showAlertInputTextArea}\r\n        showAlertInputSelect={this.showAlertInputSelect}\r\n        showAlertInputRadio={this.showAlertInputRadio}\r\n        showAlertInputCheckbox={this.showAlertInputCheckbox}\r\n        showAlertInputFile={this.showAlertInputFile}\r\n        showAlertInputRange={this.showAlertInputRange}\r\n        showAlertInputMulti={this.showAlertInputMulti}\r\n        showCustomAlert={this.showCustomAlert}\r\n        title={this.state.title}\r\n        icon={this.state.icon}\r\n        input={this.state.input}\r\n        onTitleChange={this.onTitleChange}\r\n        onIconChange={this.onIconChange}\r\n        onInputChange={this.onInputChange}\r\n\r\n      />\r\n    }\r\n  }\r\n}\r\n\r\nexport default hoc(App);","C:\\Users\\TX1\\Documents\\GitHub\\sweetalert2-demo\\src\\reportWebVitals.js",[],[],{"ruleId":"21","severity":1,"message":"22","line":3,"column":8,"nodeType":"23","messageId":"24","endLine":3,"endColumn":24},{"ruleId":"21","severity":1,"message":"25","line":4,"column":50,"nodeType":"23","messageId":"24","endLine":4,"endColumn":58},{"ruleId":"21","severity":1,"message":"26","line":10,"column":9,"nodeType":"23","messageId":"24","endLine":10,"endColumn":14},"no-unused-vars","'withReactContent' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'style' is assigned a value but never used."]