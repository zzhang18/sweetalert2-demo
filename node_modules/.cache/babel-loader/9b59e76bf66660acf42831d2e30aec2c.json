{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useState from './useState';\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\nexport default function useControlledState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState;\n\n  var _useState = useState(function () {\n    if (value !== undefined) {\n      return value;\n    }\n\n    if (defaultValue !== undefined) {\n      return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n\n    return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      innerValue = _useState2[0],\n      setInnerValue = _useState2[1];\n\n  var mergedValue = value !== undefined ? value : innerValue;\n\n  if (postState) {\n    mergedValue = postState(mergedValue);\n  } // setState\n\n\n  var onChangeRef = React.useRef(onChange);\n  onChangeRef.current = onChange;\n  var triggerChange = React.useCallback(function (newValue, ignoreDestroy) {\n    setInnerValue(newValue, ignoreDestroy);\n\n    if (mergedValue !== newValue && onChangeRef.current) {\n      onChangeRef.current(newValue, mergedValue);\n    }\n  }, [mergedValue, onChangeRef]); // Effect of reset value to `undefined`\n\n  var firstRenderRef = React.useRef(true);\n  React.useEffect(function () {\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false;\n      return;\n    }\n\n    if (value === undefined) {\n      setInnerValue(value);\n    }\n  }, [value]);\n  return [mergedValue, triggerChange];\n}","map":{"version":3,"sources":["C:/Users/TX1/Documents/GitHub/sweetalert2-demo/node_modules/rc-util/es/hooks/useMergedState.js"],"names":["_slicedToArray","React","useState","useControlledState","defaultStateValue","option","_ref","defaultValue","value","onChange","postState","_useState","undefined","_useState2","innerValue","setInnerValue","mergedValue","onChangeRef","useRef","current","triggerChange","useCallback","newValue","ignoreDestroy","firstRenderRef","useEffect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuD;AACpE,MAAIC,IAAI,GAAGD,MAAM,IAAI,EAArB;AAAA,MACIE,YAAY,GAAGD,IAAI,CAACC,YADxB;AAAA,MAEIC,KAAK,GAAGF,IAAI,CAACE,KAFjB;AAAA,MAGIC,QAAQ,GAAGH,IAAI,CAACG,QAHpB;AAAA,MAIIC,SAAS,GAAGJ,IAAI,CAACI,SAJrB;;AAMA,MAAIC,SAAS,GAAGT,QAAQ,CAAC,YAAY;AACnC,QAAIM,KAAK,KAAKI,SAAd,EAAyB;AACvB,aAAOJ,KAAP;AACD;;AAED,QAAID,YAAY,KAAKK,SAArB,EAAgC;AAC9B,aAAO,OAAOL,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAA7D;AACD;;AAED,WAAO,OAAOH,iBAAP,KAA6B,UAA7B,GAA0CA,iBAAiB,EAA3D,GAAgEA,iBAAvE;AACD,GAVuB,CAAxB;AAAA,MAWIS,UAAU,GAAGb,cAAc,CAACW,SAAD,EAAY,CAAZ,CAX/B;AAAA,MAYIG,UAAU,GAAGD,UAAU,CAAC,CAAD,CAZ3B;AAAA,MAaIE,aAAa,GAAGF,UAAU,CAAC,CAAD,CAb9B;;AAeA,MAAIG,WAAW,GAAGR,KAAK,KAAKI,SAAV,GAAsBJ,KAAtB,GAA8BM,UAAhD;;AAEA,MAAIJ,SAAJ,EAAe;AACbM,IAAAA,WAAW,GAAGN,SAAS,CAACM,WAAD,CAAvB;AACD,GA1BmE,CA0BlE;;;AAGF,MAAIC,WAAW,GAAGhB,KAAK,CAACiB,MAAN,CAAaT,QAAb,CAAlB;AACAQ,EAAAA,WAAW,CAACE,OAAZ,GAAsBV,QAAtB;AACA,MAAIW,aAAa,GAAGnB,KAAK,CAACoB,WAAN,CAAkB,UAAUC,QAAV,EAAoBC,aAApB,EAAmC;AACvER,IAAAA,aAAa,CAACO,QAAD,EAAWC,aAAX,CAAb;;AAEA,QAAIP,WAAW,KAAKM,QAAhB,IAA4BL,WAAW,CAACE,OAA5C,EAAqD;AACnDF,MAAAA,WAAW,CAACE,OAAZ,CAAoBG,QAApB,EAA8BN,WAA9B;AACD;AACF,GANmB,EAMjB,CAACA,WAAD,EAAcC,WAAd,CANiB,CAApB,CA/BoE,CAqCpC;;AAEhC,MAAIO,cAAc,GAAGvB,KAAK,CAACiB,MAAN,CAAa,IAAb,CAArB;AACAjB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAY;AAC1B,QAAID,cAAc,CAACL,OAAnB,EAA4B;AAC1BK,MAAAA,cAAc,CAACL,OAAf,GAAyB,KAAzB;AACA;AACD;;AAED,QAAIX,KAAK,KAAKI,SAAd,EAAyB;AACvBG,MAAAA,aAAa,CAACP,KAAD,CAAb;AACD;AACF,GATD,EASG,CAACA,KAAD,CATH;AAUA,SAAO,CAACQ,WAAD,EAAcI,aAAd,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useState from './useState';\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\nexport default function useControlledState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState;\n\n  var _useState = useState(function () {\n    if (value !== undefined) {\n      return value;\n    }\n\n    if (defaultValue !== undefined) {\n      return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n\n    return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      innerValue = _useState2[0],\n      setInnerValue = _useState2[1];\n\n  var mergedValue = value !== undefined ? value : innerValue;\n\n  if (postState) {\n    mergedValue = postState(mergedValue);\n  } // setState\n\n\n  var onChangeRef = React.useRef(onChange);\n  onChangeRef.current = onChange;\n  var triggerChange = React.useCallback(function (newValue, ignoreDestroy) {\n    setInnerValue(newValue, ignoreDestroy);\n\n    if (mergedValue !== newValue && onChangeRef.current) {\n      onChangeRef.current(newValue, mergedValue);\n    }\n  }, [mergedValue, onChangeRef]); // Effect of reset value to `undefined`\n\n  var firstRenderRef = React.useRef(true);\n  React.useEffect(function () {\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false;\n      return;\n    }\n\n    if (value === undefined) {\n      setInnerValue(value);\n    }\n  }, [value]);\n  return [mergedValue, triggerChange];\n}"]},"metadata":{},"sourceType":"module"}